// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrinityPlayer
import AdSupport
import Foundation
import Swift
@_exported import TrinityPlayer
import UIKit
import WebKit
@_hasMissingDesignatedInitializers public class Trinity : TrinityPlayer.TrinityProtocol {
  public static func newInstance() -> TrinityPlayer.TrinityProtocol
  weak public var delegate: TrinityPlayer.TrinityDelegate?
  public func invalidate()
  public func render(parentViewController: UIKit.UIViewController, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreGraphics.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?, isDebug: Swift.Bool)
  @objc deinit
}
public enum TrinityState {
  case main
  case fab
  public static func == (a: TrinityPlayer.TrinityState, b: TrinityPlayer.TrinityState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum TrinityParams : Swift.String {
  case campaignId
  case appName
  case appVersion
  case appBundleId
  case appIDFA
  case darkModeisOn
  case trinityVersion
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum TrinityError : Swift.Error {
  case wrongURL
  case paramsIsEmpty
  case wrongParams
  case containerViewNotLoaded
  case somethingWrong(error: Swift.Error?)
}
public protocol TrinityDelegate : AnyObject {
  func trinity(service: TrinityPlayer.TrinityProtocol, receiveError: TrinityPlayer.TrinityError)
  func trinity(service: TrinityPlayer.TrinityProtocol, detectUpdateForContentHeight height: Swift.Float, inState state: TrinityPlayer.TrinityState)
  func trinity(service: TrinityPlayer.TrinityProtocol, didCheckCookie cookieData: [Swift.String : Any])
}
public protocol TrinityProtocol {
  var delegate: TrinityPlayer.TrinityDelegate? { get set }
  func render(parentViewController: UIKit.UIViewController, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreGraphics.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?, isDebug: Swift.Bool)
  func invalidate()
}
extension TrinityPlayer.TrinityState : Swift.Equatable {}
extension TrinityPlayer.TrinityState : Swift.Hashable {}
extension TrinityPlayer.TrinityParams : Swift.Equatable {}
extension TrinityPlayer.TrinityParams : Swift.Hashable {}
extension TrinityPlayer.TrinityParams : Swift.RawRepresentable {}
