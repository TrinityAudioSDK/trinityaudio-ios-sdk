// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrinityPlayer
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import AppTrackingTransparency
import Combine
import CoreGraphics
import Foundation
import MessageUI
import Swift
import SwiftUI
@_exported import TrinityPlayer
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor @preconcurrency public struct TrinityAudioPlayer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(audioController: TrinityPlayer.TrinityAudioController)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13TrinityPlayer0a5AudioB0V4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class TrinityAudio : TrinityPlayer.TrinityAudioProtocol {
  public static func newInstance() -> any TrinityPlayer.TrinityAudioProtocol
  weak public var delegate: (any TrinityPlayer.TrinityAudioDelegate)?
  public var playerId: Swift.String?
  public var autoPlay: Swift.Bool
  @objc deinit
  public func invalidate()
  public func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreFoundation.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
  public func evaluate(javaScript: Swift.String)
  public func pause(playerID maybePlayerID: Swift.String?)
  public func pauseAll()
  public func play()
}
public protocol TrinityAudioPulseDelegate : AnyObject {
  func trinity(service: any TrinityPlayer.TrinityAudioPulseProtocol, receiveError: TrinityPlayer.TrinityError)
  func trinity(service: any TrinityPlayer.TrinityAudioPulseProtocol, didReceivePostMessage: [Swift.String : Any])
  func trinity(service: any TrinityPlayer.TrinityAudioPulseProtocol, onPlayerReady playerId: Swift.String)
  func trinity(service: any TrinityPlayer.TrinityAudioPulseProtocol, onBrowseMode toggled: Swift.Bool, expectedHeight: CoreFoundation.CGFloat)
}
public class TrinityAudioController : Foundation.ObservableObject, TrinityPlayer.TrinityAudioProtocol {
  public var delegate: (any TrinityPlayer.TrinityAudioDelegate)?
  public var autoPlay: Swift.Bool
  @Combine.Published @_projectedValueProperty($playerId) public var playerId: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $playerId: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(unitId: Swift.String, contentURL: Swift.String, settings: [Swift.String : Swift.String]? = nil, delegate: (any TrinityPlayer.TrinityAudioDelegate)? = nil, autoPlay: Swift.Bool = false)
  public func evaluate(javaScript: Swift.String)
  public func pause(playerID: Swift.String?)
  public func pauseAll()
  public func play()
  public func invalidate()
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public protocol TrinityAudioCoreProtocol {
  var playerId: Swift.String? { get }
  var autoPlay: Swift.Bool { get set }
  func play()
  func pause(playerID: Swift.String?)
  func pauseAll()
  func invalidate()
}
public protocol TrinityJSContext {
  func evaluate(javaScript: Swift.String)
}
public protocol TrinityAudioPulseProtocol : TrinityPlayer.TrinityAudioCoreProtocol, TrinityPlayer.TrinityJSContext {
  var delegate: (any TrinityPlayer.TrinityAudioPulseDelegate)? { get set }
  func render(unitId: Swift.String, rootView: UIKit.UIView, playerView: TrinityPlayer.TrinityPlayerView, playlistURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
}
public protocol TrinityAudioProtocol : TrinityPlayer.TrinityAudioCoreProtocol, TrinityPlayer.TrinityJSContext {
  var delegate: (any TrinityPlayer.TrinityAudioDelegate)? { get set }
  func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreFoundation.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
}
extension TrinityPlayer.TrinityAudioProtocol {
  public func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreFoundation.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
}
public enum TrinityParams : Swift.String {
  case appName
  case appVersion
  case appBundleId
  case appIDFA
  case darkModeisOn
  case SDKVersion
  case trinityVersion
  case isDebug
  case appStoreURL
  case GDPR
  case GDPRConsent
  case USPrivacy
  case themeId
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class TrinityPlayerView : UIKit.UIView, WebKit.WKUIDelegate, TrinityPlayer.TrinityJSContext {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func evaluate(javaScript: Swift.String)
  @objc deinit
}
extension TrinityPlayer.TrinityPlayerView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func trinityFAB(controller: TrinityPlayer.TrinityAudioController, fabViewTopLeftCoordinates: CoreFoundation.CGPoint?) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func trinityObserveScrollViewContentSize(controller: TrinityPlayer.TrinityAudioController) -> some SwiftUICore.View
  
}
@_hasMissingDesignatedInitializers final public class TrinityAudioPulseSize {
  public static let width: CoreFoundation.CGFloat
  public static let minimizedHeight: CoreFoundation.CGFloat
  public static let expandedHeight: CoreFoundation.CGFloat
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TrinityAudioPulse : TrinityPlayer.TrinityAudioPulseProtocol {
  public static func newInstance() -> any TrinityPlayer.TrinityAudioPulseProtocol
  weak final public var delegate: (any TrinityPlayer.TrinityAudioPulseDelegate)?
  final public var playerId: Swift.String?
  final public var autoPlay: Swift.Bool
  @objc deinit
  final public func invalidate()
  final public func render(unitId: Swift.String, rootView: UIKit.UIView, playerView: TrinityPlayer.TrinityPlayerView, playlistURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
  final public func evaluate(javaScript: Swift.String)
  final public func pause(playerID maybePlayerID: Swift.String?)
  final public func pauseAll()
  final public func play()
}
public enum TrinityState {
  case main
  case fab
  public static func == (a: TrinityPlayer.TrinityState, b: TrinityPlayer.TrinityState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TrinityError : Swift.Error {
  case wrongURL
  case paramsIsEmpty
  case wrongParams
  case containerViewNotLoaded
  case somethingWrong(error: (any Swift.Error)?)
}
public protocol TrinityAudioDelegate : AnyObject {
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, receiveError: TrinityPlayer.TrinityError)
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, detectUpdateForContentHeight height: Swift.Float, inState state: TrinityPlayer.TrinityState)
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, didCheckCookie cookieData: [Swift.String : Any])
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, didReceivePostMessage: [Swift.String : Any])
  func trinity(service: any TrinityPlayer.TrinityAudioProtocol, onPlayerReady playerId: Swift.String)
}
extension TrinityPlayer.TrinityAudioDelegate {
  public func trinity(service: any TrinityPlayer.TrinityAudioProtocol, onPlayerReady playerId: Swift.String)
}
extension TrinityPlayer.TrinityAudioPlayer : Swift.Sendable {}
extension TrinityPlayer.TrinityParams : Swift.Equatable {}
extension TrinityPlayer.TrinityParams : Swift.Hashable {}
extension TrinityPlayer.TrinityParams : Swift.RawRepresentable {}
extension TrinityPlayer.TrinityState : Swift.Equatable {}
extension TrinityPlayer.TrinityState : Swift.Hashable {}
