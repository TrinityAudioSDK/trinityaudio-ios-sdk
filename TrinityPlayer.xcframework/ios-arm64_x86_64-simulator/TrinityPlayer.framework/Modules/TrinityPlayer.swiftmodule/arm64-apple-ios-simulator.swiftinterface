// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrinityPlayer
import AdSupport
import AppTrackingTransparency
import Combine
import CoreGraphics
import Foundation
import Swift
import SwiftUI
@_exported import TrinityPlayer
import UIKit
import WebKit
public struct TrinityAudioPlayer : SwiftUI.View {
  public init(audioController: TrinityPlayer.TrinityAudioController)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13TrinityPlayer0a5AudioB0V4bodyQrvp", 0) ðŸ¦¸
}
@_hasMissingDesignatedInitializers public class TrinityAudio : TrinityPlayer.TrinityAudioProtocol {
  public static func newInstance() -> TrinityPlayer.TrinityAudioProtocol
  weak public var delegate: TrinityPlayer.TrinityAudioDelegate?
  public var playerId: Swift.String?
  public var autoPlay: Swift.Bool
  @objc deinit
  public func invalidate()
  public func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreGraphics.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
  public func evaluate(javaScript: Swift.String)
  public func pause(playerID maybePlayerID: Swift.String?)
  public func pauseAll()
  public func play()
}
public class TrinityAudioController : Foundation.ObservableObject, TrinityPlayer.TrinityAudioProtocol {
  public var delegate: TrinityPlayer.TrinityAudioDelegate?
  public var autoPlay: Swift.Bool
  @Foundation.Published @_projectedValueProperty($playerId) public var playerId: Swift.String? {
    get
    set
    _modify
  }
  public var $playerId: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, OSX 11.0, *)
    set
  }
  public init(unitId: Swift.String, contentURL: Swift.String, settings: [Swift.String : Swift.String]? = nil, delegate: TrinityPlayer.TrinityAudioDelegate? = nil, autoPlay: Swift.Bool = false)
  public func evaluate(javaScript: Swift.String)
  public func pause(playerID: Swift.String?)
  public func pauseAll()
  public func play()
  public func invalidate()
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public enum TrinityState {
  case main
  case fab
  public static func == (a: TrinityPlayer.TrinityState, b: TrinityPlayer.TrinityState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum TrinityParams : Swift.String {
  case appName
  case appVersion
  case appBundleId
  case appIDFA
  case darkModeisOn
  case SDKVersion
  case trinityVersion
  case isDebug
  case appStoreURL
  case GDPR
  case GDPRConsent
  case USPrivacy
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum TrinityError : Swift.Error {
  case wrongURL
  case paramsIsEmpty
  case wrongParams
  case containerViewNotLoaded
  case somethingWrong(error: Swift.Error?)
}
public protocol TrinityAudioDelegate : AnyObject {
  func trinity(service: TrinityPlayer.TrinityAudioProtocol, receiveError: TrinityPlayer.TrinityError)
  func trinity(service: TrinityPlayer.TrinityAudioProtocol, detectUpdateForContentHeight height: Swift.Float, inState state: TrinityPlayer.TrinityState)
  func trinity(service: TrinityPlayer.TrinityAudioProtocol, didCheckCookie cookieData: [Swift.String : Any])
  func trinity(service: TrinityPlayer.TrinityAudioProtocol, didReceivePostMessage: [Swift.String : Any])
  func trinity(service: TrinityPlayer.TrinityAudioProtocol, onPlayerReady playerId: Swift.String)
}
extension TrinityAudioDelegate {
  public func trinity(service: TrinityPlayer.TrinityAudioProtocol, onPlayerReady playerId: Swift.String)
}
public protocol TrinityAudioProtocol {
  var delegate: TrinityPlayer.TrinityAudioDelegate? { get set }
  var playerId: Swift.String? { get }
  var autoPlay: Swift.Bool { get set }
  func play()
  func pause(playerID: Swift.String?)
  func pauseAll()
  func evaluate(javaScript: Swift.String)
  func invalidate()
  func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreGraphics.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
}
extension TrinityAudioProtocol {
  public func render(parentViewController: UIKit.UIViewController, unitId: Swift.String, sourceView: UIKit.UIView, fabViewTopLeftCoordinates: CoreGraphics.CGPoint?, contentURL: Foundation.URL, settings: [Swift.String : Swift.String]?)
}
extension View {
  public func trinityFAB(controller: TrinityPlayer.TrinityAudioController, fabViewTopLeftCoordinates: CoreGraphics.CGPoint?) -> some SwiftUI.View
  
  public func trinityObserveScrollViewContentSize(controller: TrinityPlayer.TrinityAudioController) -> some SwiftUI.View
  
}
extension TrinityPlayer.TrinityState : Swift.Equatable {}
extension TrinityPlayer.TrinityState : Swift.Hashable {}
extension TrinityPlayer.TrinityParams : Swift.Equatable {}
extension TrinityPlayer.TrinityParams : Swift.Hashable {}
extension TrinityPlayer.TrinityParams : Swift.RawRepresentable {}
